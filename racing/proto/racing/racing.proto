syntax = "proto3";
package racing;

option go_package = "/racing";

import "google/protobuf/timestamp.proto";

service Racing {
  // ListRaces will return a collection of all races.
  rpc ListRaces(ListRacesRequest) returns (ListRacesResponse) {}

  // GetRaceByID will return a single race
  rpc GetRaceByID(GetRaceByIDRequest) returns (GetRaceByIDResponse) {}

  // ListSports will return a collection of all sports.
  rpc ListSports(ListSportsRequest) returns (ListSportsResponse) {}

  // GetSportByID will return a single sport event
  rpc GetSportByID(GetSportByIDRequest) returns (GetSportByIDResponse) {}
}

/* Requests/Responses */
// Request to GetRaceByID
message GetRaceByIDRequest {
  int64 id = 1;
}

//Response to GetRaceByID call
message GetRaceByIDResponse {
  Race race = 1;
}
// Request to ListRaces
message ListRacesRequest {
  ListRacesRequestFilter filter = 1;
}

// Response to ListRaces call.
message ListRacesResponse {
  repeated Race races = 1;
}

// Filter for listing races.
message ListRacesRequestFilter {
  repeated int64 meeting_ids = 1;
  bool visible_only = 2;
  string orderBy = 3;
  string sort = 4;
}
// Request to GetSportByID
message GetSportByIDRequest {
  int64 id = 1;
}

//Response to GetSportByID call
message GetSportByIDResponse {
  sportEvent sport = 1;
}
// Request to ListSports
message ListSportsRequest {
  ListSportsRequestFilter filter = 1;
}

// Response to ListSports call.
message ListSportsResponse {
  repeated sportEvent sports = 1;
}

// Filter for listing sports.
message ListSportsRequestFilter {
  repeated int64 ids = 1;
  string sport = 2;
  string orderBy = 3;
  string sort = 4;
}

/* Resources */

// A sportEvent resource.
message sportEvent {
  // ID represents a unique identifier for the sport.
  int64 id = 1;
  // Name is the official name given to the sport.
  string name = 2;
  // AdvertisedStartTime is the time the sport is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 3;
  // Sport is the type of sport the event is played in
  string sport = 4;
  // Current score is the current score of the sport
  string current_score = 5;
}

// A race resource.
message Race {
  // ID represents a unique identifier for the race.
  int64 id = 1;
  // MeetingID represents a unique identifier for the races meeting.
  int64 meeting_id = 2;
  // Name is the official name given to the race.
  string name = 3;
  // Number represents the number of the race.
  int64 number = 4;
  // Visible represents whether or not the race is visible.
  bool visible = 5;
  // AdvertisedStartTime is the time the race is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  // Race status - if it's in the past it will be set to closed.
  string status = 7;
}

